#summary search & replace plugin.

= Introduction =

The MkS Search & Replace plugin adds the support of searching & replacing within files or directories.


= Details =
Search & Replace is a common features in most text editors & IDEs^(1)^. It allows you to search for a specified string in the current file, or in files in a specified directory & replace them with a specified string. That will help you override any mistakes or late-changes done to the whole project.

== Commands provided by the plugin ==
When the Search & Replace plugin is enabled, a set of commands will be added to View > Search & Replace, these are:
 * Search: to search in the current file.
 * Replace: to search & replace in the current file.
 * Search Next: to search for the next occurrences.
 * Search Previous: to search for the previous occurrences.
 * Search in Directory: to search in all files in a directory.
 * Replace in Directory: to search & replace in all files in a directory.
 * Search in Project Files: to search in all files in the current opened project.
 * Replace in Project Files: to search & replace in all files in the current opened project.
 * Search in Opened Files: to search in all files in all opened files.
 * Replace in Opened Files: to search & replace in all files in all opened files.

== Working with !RegExp^(2)^ ==
Search & Replace plugin provides searching & replacing with RegExp. RegExp is a logical string that is used for matching a string according to a logical pattern not a specified string.

=== Classical Searching vs. !RegExp Searching ===
The classical searching can only match the string which is the same as the search string. For example, if you search for "car" in these lines:
{{{
this car is a piece of cartoon. it's not a real CAAAR.
}}}
it'll match:
{{{
this "car" is a piece of "car"toon. it's not a real CAAAR.
}}}
in this case we only matched two occurrences, & only one of them is the one we need. Notice that the last word wasn't matched because it's not the same as the search string.<br />
To do so, we can use the !RegExp, which, as we said, a logical pattern. The meaning of "logical pattern" is that we are not matching string with string, but, we are matching a string with a set of strings according to the pattern used. To write a simple pattern you need to know how the pattern is being processed. For example, this pattern "c[a]+r[\s\W]". The parts of these pattern are:
 * c: this is a letter, the !RegExp engine will match a single c letter.
 * [a]+: putting a letter between the expression brackets means something special is going to be with this. In this case we are searching for a letter a one time & more.
 * r: the same as c.
 * [\s\W]: again, the expression brackets, but, the expression here is different, we didn't provide normal characters, we provided literal characters. These characters can mean one thing or a set of things. the \s means a space & the \W means a non-word character such as "'(/.>,:;<|.
Now let's look to the pattern we made:
 * 1. we asked the engine to match a string starting with c.
 * 2. & followed by single or multi a.
 * 3. & followed by r.
 * 4. & ends with space or a non-word character.
if we applied this pattern on the last testcase, we will get:
{{{
this "car" is a piece of cartoon. it's not a real "CAAAR".
}}}
to learn more about the patterns, refer to: [http://en.wikipedia.org/wiki/Regular_expression]

=== Applying !RegExp in !MkS ===
To enable the !Regex you will need to 

-----------------------------------------------------------------------------------------
(1): Integrated Development Environments.<br />
(2): Regular Expression, also known as regex.<br />